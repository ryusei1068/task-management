{"ast":null,"code":"var _jsxFileName = \"/Users/nohararyusei/dev/task-v0.1/client/src/components/taskCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { BsTrash } from 'react-icons/bs';\nimport API from \"./api\";\nimport cuttingStr from \"./shaping\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskCard(props) {\n  _s();\n\n  const [editMode, setEditMode] = useState(false);\n  const [taskName, setTaskName] = useState(props.name);\n  const [taskID] = useState(props.id);\n\n  const keyPress = (e, path, data) => {\n    if (e.which === 13) {\n      setEditMode(false);\n      const data = {\n        id: taskID,\n        TaskName: taskName\n      };\n      API.put(\"task\", {\n        data\n      }).then(response => {\n        setTaskName(cuttingStr(response.data.TaskName));\n      }).catch(err => {\n        // what should I do \n        window.location.reload();\n      });\n    }\n  };\n\n  const editDetail = /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n    className: \"task-detail\",\n    defaultValue: \"\",\n    onKeyPress: e => keyPress(e),\n    disabled: editMode,\n    onClick: () => setEditMode(false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n\n  const task = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"task-name\",\n      onClick: () => setEditMode(true),\n      children: taskName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n\n  const textArea = /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n    className: \"task-name\",\n    onKeyPress: e => keyPress(e),\n    onChange: e => setTaskName(e.target.value),\n    autoFocus: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 17\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toast fade show\",\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-header\",\n      children: [editMode ? textArea : task, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trash-box-icon\",\n        onClick: () => props.deleteTask(\"task\", {\n          id: props.id\n        }, props.id),\n        children: /*#__PURE__*/_jsxDEV(BsTrash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        style: {\n          color: \"gray\"\n        },\n        children: \"detail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), editDetail]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 13\n  }, this);\n}\n\n_s(TaskCard, \"0tYcT4B/EUXvei3AQg3/+gTJRkw=\");\n\n_c = TaskCard;\nexport default TaskCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCard\");","map":{"version":3,"sources":["/Users/nohararyusei/dev/task-v0.1/client/src/components/taskCard.js"],"names":["React","useState","TextareaAutosize","BsTrash","API","cuttingStr","TaskCard","props","editMode","setEditMode","taskName","setTaskName","name","taskID","id","keyPress","e","path","data","which","TaskName","put","then","response","catch","err","window","location","reload","editDetail","task","textArea","target","value","deleteTask","color"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { BsTrash } from 'react-icons/bs';\nimport API from \"./api\";\nimport cuttingStr from \"./shaping\";\n\nfunction TaskCard(props) {\n    const [editMode, setEditMode] = useState(false);\n    const [taskName, setTaskName] = useState(props.name);\n    const [taskID] = useState(props.id);\n\n    const keyPress = (e, path, data) => {\n        if (e.which === 13) {\n            setEditMode(false)\n            const data = {id: taskID, TaskName: taskName};\n            API.put(\"task\", {\n                data\n            })\n            .then(response => {\n                setTaskName(cuttingStr(response.data.TaskName));\n            })\n            .catch(err => {\n                // what should I do \n                window.location.reload();\n            })\n        }\n    }\n\n    const editDetail = \n        <TextareaAutosize \n            className=\"task-detail\" \n            defaultValue=\"\"\n            onKeyPress={(e) => keyPress(e)} \n            disabled={editMode}\n            onClick={() => setEditMode(false)}\n        />\n\n    const task =  \n            <>\n                <p className=\"task-name\" onClick={() => setEditMode(true)}>{taskName}</p>\n            </>\n\n    const textArea =\n                <TextareaAutosize \n                    className=\"task-name\"\n                    onKeyPress={(e) => keyPress(e)} \n                    onChange={(e) => setTaskName(e.target.value)}\n                    autoFocus={true}\n                />\n        \n    return (\n            <div className=\"toast fade show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n                <div className=\"toast-header\">\n                    {editMode ? textArea : task}\n                    <div className=\"trash-box-icon\" onClick={() => props.deleteTask(\"task\", { id: props.id }, props.id)}>\n                        <BsTrash />\n                    </div>\n                </div>\n                <div className=\"toast-body\">\n                    <small style={{color: \"gray\"}}>detail</small>\n                    {editDetail}\n                </div>\n            </div>\n        )\n}\n\n\nexport default TaskCard;\n"]},"metadata":{},"sourceType":"module"}