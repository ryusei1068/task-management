{"ast":null,"code":"var _jsxFileName = \"/Users/nohararyusei/dev/task-v0.1/client/src/pages/board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TaskSection from \"../components/task-section\";\nimport EnterArea from \"../components/enterArea\";\nimport AddButton from \"../components/addButton\";\nimport axios from 'axios';\nimport postData from \"../api/post\";\nimport deleteData from \"../api/delete\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../styles/board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.withCredentials = true;\nconst api = process.env.REACT_APP_API;\n\nfunction Board(props) {\n  _s();\n\n  const [tasklist, setTasklist] = useState(props.tasklist);\n  const [listName, setListName] = useState(\"\");\n  const [dynamisation, setDynamisation] = useState(false);\n  useEffect(() => {\n    axios.get(api + \"/board\").then(response => {\n      const data = response.data;\n      setTasklist(data);\n    }).catch(err => {// what should I do\n    });\n  }, []);\n\n  const addTaskList = () => {\n    setDynamisation(true);\n  };\n\n  const cancelAdd = e => {\n    e.preventDefault();\n    setDynamisation(false);\n  };\n\n  const handleSubmit = (e, path, data) => {\n    e.preventDefault();\n    if (listName.length === 0) return;\n    postData(path, data).then(response => {\n      const {\n        tasklistID,\n        listName,\n        Tasks\n      } = response.data;\n      const newList = {\n        id: tasklistID,\n        listName: listName,\n        Tasks: Tasks\n      };\n      setTasklist([...tasklist, newList]);\n      setDynamisation(false);\n      setListName(\"\");\n    }).catch(err => {// what should I do\n    });\n  };\n\n  const deletelist = (path, data, id) => {\n    deleteData(path, data).then(response => {// what should I do\n    }).catch((response, err) => {// what should I do\n    });\n    const remainlist = tasklist.filter(list => id !== list.id);\n    setTasklist(remainlist);\n  };\n\n  const enterArea = /*#__PURE__*/_jsxDEV(EnterArea, {\n    handleSubmit: e => handleSubmit(e, \"/tasklist\", {\n      listName: listName\n    }),\n    wrap: \"enter-section-name-wrap\",\n    handleChange: e => setListName(e.target.value),\n    text: \"Add List\",\n    placeholder: \"Enter list title...\",\n    cancel: e => setDynamisation(false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n\n  const addAnotherListBtn = /*#__PURE__*/_jsxDEV(AddButton, {\n    addElement: addTaskList,\n    text: \"Add another list\",\n    ClassName: \"add-list\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n\n  const sectionList = tasklist.map(section => /*#__PURE__*/_jsxDEV(TaskSection, {\n    id: section.id,\n    name: cuttingStr(section.listName),\n    deletelist: deletelist,\n    task: section.Tasks\n  }, section.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-canvas\",\n      children: [sectionList, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-1\",\n        children: dynamisation ? enterArea : addAnotherListBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Board, \"3t/Hw9XidHMiBYgZRn0/OWhbDKU=\");\n\n_c = Board;\n\nfunction cuttingStr(str) {\n  const bytes = encodeURI(str).replace(/%../g, \"*\").length;\n  return bytes >= 24 ? str.substr(0, 23) + \"...\" : str;\n}\n\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/nohararyusei/dev/task-v0.1/client/src/pages/board.js"],"names":["React","useEffect","useState","TaskSection","EnterArea","AddButton","axios","postData","deleteData","defaults","withCredentials","api","process","env","REACT_APP_API","Board","props","tasklist","setTasklist","listName","setListName","dynamisation","setDynamisation","get","then","response","data","catch","err","addTaskList","cancelAdd","e","preventDefault","handleSubmit","path","length","tasklistID","Tasks","newList","id","deletelist","remainlist","filter","list","enterArea","target","value","addAnotherListBtn","sectionList","map","section","cuttingStr","str","bytes","encodeURI","replace","substr"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TaskSection from \"../components/task-section\";\nimport EnterArea from \"../components/enterArea\";\nimport AddButton from \"../components/addButton\";\nimport axios from 'axios';\nimport postData from \"../api/post\";\nimport deleteData from \"../api/delete\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../styles/board.css\";\naxios.defaults.withCredentials = true;\nconst api = process.env.REACT_APP_API;\n\nfunction Board(props) {\n    const [tasklist, setTasklist] = useState(props.tasklist);\n    const [listName, setListName] = useState(\"\");\n    const [dynamisation, setDynamisation] = useState(false);\n\n    useEffect(() => {\n        axios.get(api + \"/board\")\n        .then(response => {\n            const data = response.data\n            setTasklist(data);\n        })\n        .catch(err => {\n            // what should I do\n        })\n    }, [])\n\n    const addTaskList = () => {\n        setDynamisation(true);\n    }\n\n    const cancelAdd = (e) => {\n        e.preventDefault()\n        setDynamisation(false)\n    }\n\n    const handleSubmit = (e, path, data) => {\n        e.preventDefault();\n        if (listName.length === 0) return ;\n\n        postData(path, data)\n        .then(response => {\n            const  { tasklistID, listName, Tasks } = response.data; \n            const newList = { id: tasklistID, listName: listName, Tasks: Tasks };\n            setTasklist([...tasklist, newList])\n            setDynamisation(false)\n            setListName(\"\")\n        })\n        .catch(err => {\n            // what should I do\n        })\n    }\n\n    const deletelist = (path, data, id) => {\n\n        deleteData(path, data)\n        .then(response => {\n            // what should I do\n        })\n        .catch((response, err) => {\n            // what should I do\n        })\n\n        const remainlist = tasklist.filter(list => id !== list.id);\n        setTasklist(remainlist)\n    }\n\n    const enterArea = \n        <EnterArea \n            handleSubmit={(e) => handleSubmit(e, \"/tasklist\", { listName: listName })}\n            wrap=\"enter-section-name-wrap\"\n            handleChange={(e) => setListName(e.target.value)}\n            text=\"Add List\"\n            placeholder=\"Enter list title...\"\n            cancel={(e) => setDynamisation(false)}\n        />\n\n    const addAnotherListBtn = \n        <AddButton \n            addElement={addTaskList}\n            text=\"Add another list\"\n            ClassName=\"add-list\"    \n        />\n\n    const sectionList = tasklist\n    .map(section => (\n        <TaskSection\n            id={section.id}\n            key={section.id}\n            name={cuttingStr(section.listName)}\n            deletelist={deletelist}\n            task={section.Tasks}\n        />\n    ))\n\n    return (\n            <div className=\"board-wrapper\">\n                <div className=\"board-canvas\">\n                    {sectionList}\n                    <div className=\"mx-1\">\n                        {dynamisation ? enterArea : addAnotherListBtn}\n                    </div>\n                </div>\n            </div>\n        )\n}\n\nfunction cuttingStr(str) {\n    const bytes = encodeURI(str).replace(/%../g, \"*\").length;\n    return bytes >= 24 ? str.substr(0, 23) + \"...\" : str;\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}