{"ast":null,"code":"var _jsxFileName = \"/Users/nohararyusei/dev/task-management-v1-public/client/src/components/taskCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { BsTrash } from 'react-icons/bs';\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport API from \"./api\";\nimport cuttingStr from \"./shaping\";\nimport Modal from \"./modal\";\nimport \"../styles/taskCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskCard(props) {\n  _s();\n\n  const [editable, setEditable] = useState(false);\n  const [taskName, setTaskName] = useState(props.name);\n  const [taskID] = useState(props.id);\n  const [isOpen, setOpen] = useState(false);\n\n  const keyPress = (e, path, data) => {\n    if (e.which === 13 && taskName.length) {\n      setEditable(false);\n      API.put(path, {\n        data\n      }).then(response => {\n        setTaskName(response.data.TaskName);\n      }).catch(err => {\n        window.location.reload();\n      });\n    }\n  };\n\n  const task = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"task-name\",\n      onClick: () => setEditable(true),\n      children: cuttingStr(taskName)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n\n  const textArea = /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n    className: \"task-name\",\n    onKeyPress: e => keyPress(e, \"task\", {\n      id: taskID,\n      TaskName: taskName\n    }),\n    onChange: e => setTaskName(e.target.value),\n    autoFocus: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toast fade show\",\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-header d-flex align-items-center\",\n      children: [editable ? textArea : task, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trash-box-icon\",\n          onClick: () => props.deleteTask(\"task\", {\n            id: props.id\n          }, props.id),\n          children: /*#__PURE__*/_jsxDEV(BsTrash, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"edit-icon\",\n          onClick: () => setOpen(true),\n          children: /*#__PURE__*/_jsxDEV(AiOutlineEdit, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), isOpen ? /*#__PURE__*/_jsxDEV(Modal, {\n      setOpen: setOpen,\n      taskName: taskName,\n      taskid: taskID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskCard, \"YrhXTnHAcq8814uLadk3OQfvblw=\");\n\n_c = TaskCard;\nexport default TaskCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCard\");","map":{"version":3,"sources":["/Users/nohararyusei/dev/task-management-v1-public/client/src/components/taskCard.js"],"names":["React","useState","TextareaAutosize","BsTrash","AiOutlineEdit","API","cuttingStr","Modal","TaskCard","props","editable","setEditable","taskName","setTaskName","name","taskID","id","isOpen","setOpen","keyPress","e","path","data","which","length","put","then","response","TaskName","catch","err","window","location","reload","task","textArea","target","value","deleteTask"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { BsTrash } from 'react-icons/bs';\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport API from \"./api\";\nimport cuttingStr from \"./shaping\";\nimport Modal from \"./modal\";\nimport \"../styles/taskCard.css\";\n\n\nfunction TaskCard(props) {\n  const [editable, setEditable] = useState(false);\n  const [taskName, setTaskName] = useState(props.name);\n  const [taskID] = useState(props.id);\n  const [isOpen, setOpen] = useState(false);\n\n  const keyPress = (e, path, data) => {\n    if (e.which === 13 && taskName.length) {\n      setEditable(false)\n      API.put(path, {\n        data\n      })\n        .then(response => {\n          setTaskName(response.data.TaskName);\n        })\n        .catch(err => {\n          window.location.reload();\n        })\n    }\n  }\n\n  const task =\n    <>\n      <p className=\"task-name\" onClick={() => setEditable(true)}>{cuttingStr(taskName)}</p>\n    </>\n\n  const textArea =\n    <TextareaAutosize\n      className=\"task-name\"\n      onKeyPress={(e) => keyPress(e, \"task\", { id: taskID, TaskName: taskName })}\n      onChange={(e) => setTaskName(e.target.value)}\n      autoFocus={true}\n    />\n\n  return (\n    <div className=\"toast fade show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n      <div className=\"toast-header d-flex align-items-center\">\n        {editable ? textArea : task}\n        <div className=\"d-flex flex-column\">\n          <div className=\"trash-box-icon\"\n            onClick={() => props.deleteTask(\"task\", { id: props.id }, props.id)} >\n            <BsTrash />\n          </div>\n          <div className=\"edit-icon\" onClick={() => setOpen(true)}>\n            <AiOutlineEdit />\n          </div>\n        </div>\n      </div>\n      {isOpen ? <Modal setOpen={setOpen} taskName={taskName} taskid={taskID} /> : null}\n    </div>\n  )\n}\n\n\nexport default TaskCard;\n"]},"metadata":{},"sourceType":"module"}